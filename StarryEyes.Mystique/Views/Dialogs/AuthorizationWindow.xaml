<Window x:Class="StarryEyes.Mystique.Views.Dialogs.AuthorizationWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:v="clr-namespace:StarryEyes.Mystique.Views.Dialogs"
        xmlns:vm="clr-namespace:StarryEyes.Mystique.ViewModels.Dialogs"
        Title="Twitterへ認証"
        Width="330"
        Height="120"
        mc:Ignorable="d" WindowStyle="ToolWindow" ResizeMode="NoResize" ShowInTaskbar="False">
    <Window.Resources>
    	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    	<l:VisibilityAndBooleanConverter x:Key="VisibilityAndBooleanConverter" />
    </Window.Resources>

    <Window.DataContext>
        <vm:AuthorizationViewModel />
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--  WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </i:EventTrigger>

        <!--  Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}">
            <l:InformationDialogInteractionMessageAction />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction />
        </l:InteractionMessageTrigger>

        <!--  WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください  -->

    </i:Interaction.Triggers>

    <Grid>
        <TextBlock Margin="10,10,0,0"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Top"
                   Text="Twitterへログインし、アクセスを許可してください。
&#10;その後に表示された番号を入力してください。"
                   TextWrapping="Wrap" />
        <TextBox Width="180"
                 Margin="10,0,0,10"
                 HorizontalAlignment="Left"
                 VerticalAlignment="Bottom"
                 Text="{Binding Pin,
                                Mode=TwoWay,
                                UpdateSourceTrigger=PropertyChanged}"
                 TextWrapping="Wrap" />
        <Button Width="100"
                Margin="0,0,10,10"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                Command="{Binding VerifyPinCommand,
                                  Mode=OneWay}"
                Content="OK" />
        <Grid x:Name="ProcessingOverwrap" Visibility="{Binding IsNegotiating, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
            <Grid.Background>
                <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}" />
            </Grid.Background>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <TextBlock HorizontalAlignment="Center"
                       VerticalAlignment="Bottom"
                       Foreground="Black"
                       Text="Twitterと通信しています……"
                       TextAlignment="Center"
                       TextWrapping="Wrap" />
            <ProgressBar Grid.Row="1"
                         Height="8"
                         Margin="20,0"
                         VerticalAlignment="Top"
                         IsIndeterminate="True" />
        </Grid>
    </Grid>
</Window>
